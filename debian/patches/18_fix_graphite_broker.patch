diff --git a/shinken/modules/graphite_broker.py b/shinken/modules/graphite_broker.py
index 1bc303b..b2ddccc 100644
--- a/shinken/modules/graphite_broker.py
+++ b/shinken/modules/graphite_broker.py
@@ -44,7 +44,7 @@ properties = {
     'daemons': ['broker'],
     'type': 'graphite_perfdata',
     'external': False,
-    }
+}
 
 
 # Called by the plugin manager to get a broker
@@ -74,30 +74,34 @@ class Graphite_broker(BaseModule):
         self.multival = re.compile(r'_(\d+)$')
 
         # optional "sub-folder" in graphite to hold the data of a specific host
-        self.graphite_data_source = self.illegal_char.sub('_',
-                                   getattr(modconf, 'graphite_data_source', ''))
+        self.graphite_data_source = \
+            self.illegal_char.sub('_', getattr(modconf, 'graphite_data_source', ''))
 
 
     # Called by Broker so we can do init stuff
     # TODO: add conf param to get pass with init
     # Conf from arbiter!
     def init(self):
-        logger.info("[Graphite broker] I init the %s server connection to %s:%d" % (self.get_name(), str(self.host), self.port))
+        logger.info("[Graphite broker] I init the %s server connection to %s:%d" %
+                    (self.get_name(), str(self.host), self.port))
         try:
             self.con = socket()
             self.con.connect((self.host, self.port))
         except IOError, err:
-                logger.error("[Graphite broker] Graphite Carbon instance network socket! IOError:%s" % str(err))
+                logger.error("[Graphite broker] Graphite Carbon instance network socket!"
+                             " IOError:%s" % str(err))
                 raise
-        logger.info("[Graphite broker] Connection successful to  %s:%d" % (str(self.host), self.port))
+        logger.info("[Graphite broker] Connection successful to  %s:%d"
+                    % (str(self.host), self.port))
 
-    # Sending data to Carbon. In case of failure, try to reconnect and send again. If carbon instance is down
-    # Data are buffered.
+    # Sending data to Carbon. In case of failure, try to reconnect and send again.
+    # If carbon instance is down, data are buffered.
     def send_packet(self, p):
         try:
             self.con.sendall(p)
-        except IOError, err:
-            logger.error("[Graphite broker] Failed sending data to the Graphite Carbon instance ! Trying to reconnect ... ")
+        except IOError:
+            logger.error("[Graphite broker] Failed sending data to the Graphite Carbon instance !"
+                         " Trying to reconnect ... ")
             try:
                 self.init()
                 self.con.sendall(p)
@@ -111,10 +115,10 @@ class Graphite_broker(BaseModule):
         metrics = PerfDatas(perf_data)
 
         for e in metrics:
-            try:
-                logger.debug("[Graphite broker] Groking: %s" % str(e))
-            except UnicodeEncodeError:
-                pass
+            #try:
+            #    logger.debug("[Graphite broker] Groking: %s" % str(e))
+            #except UnicodeEncodeError:
+            #    pass
 
             name = self.illegal_char.sub('_', e.name)
             name = self.multival.sub(r'.\1', name)
@@ -128,10 +132,10 @@ class Graphite_broker(BaseModule):
             if name_value[name] == '':
                 continue
 
-            try:
-                logger.debug("[Graphite broker] End of grok: %s, %s" % (name, str(e.value)))
-            except UnicodeEncodeError:
-                pass
+            #try:
+            #    logger.debug("[Graphite broker] End of grok: %s, %s" % (name, str(e.value)))
+            #except UnicodeEncodeError:
+            #    pass
             for key, value in name_value.items():
                 res.append((key, value))
         return res
@@ -174,10 +178,11 @@ class Graphite_broker(BaseModule):
 
         check_time = int(data['last_chk'])
 
-        try:
-            logger.debug("[Graphite broker] Hostname: %s, Desc: %s, check time: %d, perfdata: %s" % (hname, desc, check_time, str(perf_data)))
-        except UnicodeEncodeError:
-            pass
+        #try:
+        #    logger.debug("[Graphite broker] Hostname: %s, Desc: %s, check time: %d, perfdata: %s"
+        #                 % (hname, desc, check_time, str(perf_data)))
+        #except UnicodeEncodeError:
+        #    pass
 
         if self.graphite_data_source:
             path = '.'.join((hname, self.graphite_data_source, desc))
@@ -187,27 +192,24 @@ class Graphite_broker(BaseModule):
         if self.use_pickle:
             # Buffer the performance data lines
             for (metric, value) in couples:
-                if value:
-                    self.buffer.append(("%s.%s" % (path, metric),
-                                       ("%d" % check_time,
-                                        "%s" % str(value))))
+                self.buffer.append(("%s.%s" % (path, metric),
+                                   ("%d" % check_time, "%s" % str(value))))
 
         else:
             lines = []
             # Send a bulk of all metrics at once
             for (metric, value) in couples:
-                if value:
-                    lines.append("%s.%s %s %d" % (path, metric,
-                                                  str(value), check_time))
+                lines.append("%s.%s %s %d" % (path, metric, str(value), check_time))
             packet = '\n'.join(lines) + '\n'  # Be sure we put \n every where
-            try:
-                logger.debug("[Graphite broker] Launching: %s" % packet)
-            except UnicodeEncodeError:
-                pass
+            #try:
+            #    logger.debug("[Graphite broker] Launching: %s" % packet)
+            #except UnicodeEncodeError:
+            #    pass
             try:
                 self.send_packet(packet)
-            except IOError, err:
-                logger.error("[Graphite broker] Failed sending to the Graphite Carbon. Data are lost")
+            except IOError:
+                logger.error("[Graphite broker] Failed sending to the Graphite Carbon."
+                             " Data are lost")
 
 
     # A host check result brok has just arrived, we UPDATE data info with this
@@ -229,10 +231,11 @@ class Graphite_broker(BaseModule):
 
         check_time = int(data['last_chk'])
 
-        try:
-            logger.debug("[Graphite broker] Hostname %s, check time: %d, perfdata: %s" % (hname, check_time, str(perf_data)))
-        except UnicodeEncodeError:
-            pass
+        #try:
+        #    logger.debug("[Graphite broker] Hostname %s, check time: %d, perfdata: %s"
+        #                 % (hname, check_time, str(perf_data)))
+        #except UnicodeEncodeError:
+        #    pass
 
         if self.graphite_data_source:
             path = '.'.join((hname, self.graphite_data_source))
@@ -242,27 +245,24 @@ class Graphite_broker(BaseModule):
         if self.use_pickle:
             # Buffer the performance data lines
             for (metric, value) in couples:
-                if value:
-                    self.buffer.append(("%s.__HOST__.%s" % (path, metric),
-                                       ("%d" % check_time,
-                                        "%s" % value)))
+                self.buffer.append(("%s.__HOST__.%s" % (path, metric),
+                                   ("%d" % check_time,"%s" % value)))
         else:
             lines = []
             # Send a bulk of all metrics at once
             for (metric, value) in couples:
-                if value:
-                    lines.append("%s.__HOST__.%s %s %d" % (path, metric,
-                                                           value, check_time))
+                lines.append("%s.__HOST__.%s %s %d" % (path, metric, value, check_time))
             packet = '\n'.join(lines) + '\n'  # Be sure we put \n every where
-            try:
-                logger.debug("[Graphite broker] Launching: %s" % packet)
-            except UnicodeEncodeError:
-                pass
+            #try:
+            #    logger.debug("[Graphite broker] Launching: %s" % packet)
+            #except UnicodeEncodeError:
+            #    pass
             try:
                 self.send_packet(packet)
-            except IOError, err:
-                logger.error("[Graphite broker] Failed sending to the Graphite Carbon. Data are lost")
-             
+            except IOError:
+                logger.error("[Graphite broker] Failed sending to the Graphite Carbon."
+                             " Data are lost")
+
 
     def hook_tick(self, brok):
         """Each second the broker calls the hook_tick function
@@ -277,19 +277,18 @@ class Graphite_broker(BaseModule):
                 self.buffer = []
                 self.ticks = 0
                 return
-           
+
             # Format the data
             payload = cPickle.dumps(self.buffer)
             header = struct.pack("!L", len(payload))
             packet = header + payload
 
             try:
-	        self.send_packet(packet)
+                self.send_packet(packet)
                 # Flush the buffer after a successful send to Graphite
                 self.buffer = []
                 self.ticks = 0
-            except IOError, err:
+            except IOError:
                 self.ticks += 1
-                logger.error("[Graphite broker] Sending data Failed. Buffering state : %s / %s" % ( self.ticks , self.tick_limit ))
-            
-
+                logger.error("[Graphite broker] Sending data Failed. Buffering state : %s / %s"
+                             % (self.ticks, self.tick_limits))
